{"remainingRequest":"/Users/bokus/Desktop/secretproject/bitrix/local/vue-mossman/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bokus/Desktop/secretproject/bitrix/local/vue-mossman/src/components/OrderDetail.vue?vue&type=template&id=0853e770&","dependencies":[{"path":"/Users/bokus/Desktop/secretproject/bitrix/local/vue-mossman/src/components/OrderDetail.vue","mtime":1596113848011},{"path":"/Users/bokus/Desktop/secretproject/bitrix/local/vue-mossman/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bokus/Desktop/secretproject/bitrix/local/vue-mossman/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/bokus/Desktop/secretproject/bitrix/local/vue-mossman/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bokus/Desktop/secretproject/bitrix/local/vue-mossman/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}